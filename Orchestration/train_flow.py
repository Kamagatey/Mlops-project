from prefect import flow, task
from prefect.deployments import Deployment
from prefect.server.schemas.schedules import IntervalSchedule
from datetime import datetime, timedelta
import pandas as pd
import subprocess
import joblib
import os
import numpy as np
import argparse
from prepare_data import preprocess_data, load_data

def get_default_period():
    """D√©tecte automatiquement le mois/ann√©e pr√©c√©dent"""
    now = datetime.now()
    if now.month == 1:
        return 12, now.year - 1
    return now.month - 1, now.year

@task
def download_new_data_task(month: int, year: int):
    date_str = f"{year:04d}-{month:02d}-01"
    print(f"üì• T√©l√©chargement des donn√©es depuis {date_str}...")
    
    url = f"https://data.cityofchicago.org/resource/85ca-t3if.csv?$where=crash_date>'{date_str}'"
    df = pd.read_csv(url)
    os.makedirs("data", exist_ok=True)
    df.to_csv("data/new_data.csv", index=False)
    
    print(f"‚úÖ {df.shape[0]} lignes t√©l√©charg√©es.")
    return "data/new_data.csv"

@task
def prepare_and_extend_data_task():
    # Chargement des donn√©es
    try:
        df_old = pd.read_csv('data/Traffic_Crashes.csv')
        df_old.columns = df_old.columns.str.lower()
    except FileNotFoundError:
        df_old = pd.DataFrame()

    df_new = load_data("data/new_data.csv")
    df_full = pd.concat([df_old, df_new], ignore_index=True)

    # Pr√©traitement
    X, y, preprocessor = preprocess_data(df_full)
    
    # Sauvegarde
    os.makedirs("processed_data", exist_ok=True)
    pd.DataFrame(X).to_csv("processed_data/X_prepared.csv", index=False)
    pd.DataFrame(y).to_csv("processed_data/y_prepared.csv", index=False)
    joblib.dump(preprocessor, "processed_data/preprocessor.joblib")
    
    print(f"‚úÖ Donn√©es mises √† jour : {X.shape[0]} √©chantillons")
    return X.shape[0]

@task
def train_model_task():
    subprocess.run(["python", "train_rf_optuna.py"], check=True)
    return "‚úÖ Mod√®le entra√Æn√© et logu√©."

@flow(name="Chicago Traffic - ML Pipeline", persist_result=False)
def main_pipeline(month: int = None, year: int = None):
    # D√©tection automatique si non sp√©cifi√©
    month, year = (month, year) if (month and year) else get_default_period()
    
    download_new_data_task(month, year)
    prepare_and_extend_data_task()
    train_model_task()

def deploy():
    """Cr√©e un d√©ploiement programm√©"""
    Deployment.build_from_flow(
        flow=main_pipeline,
        name="Training Automatique",
        schedule=IntervalSchedule(interval=timedelta(days=30)),
        work_pool_name="my-pool"
    ).apply()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--month", type=int, default=None)
    parser.add_argument("--year", type=int, default=None)
    parser.add_argument("--deploy", action="store_true", help="Cr√©er un d√©ploiement programm√©")

    args = parser.parse_args()

    if args.deploy:
        deploy()
        print("‚úÖ D√©ploiement cr√©√©. Le pipeline s'ex√©cutera automatiquement chaque mois.")
    else:
        main_pipeline(month=args.month, year=args.year)